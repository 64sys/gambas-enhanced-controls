' Gambas class file

' Copyright (c) 2015 jornmo - moviga@mykolab.ch
'
' Permission is hereby granted, free of charge, to any person obtaining a copy
' of this software and associated documentation files (the "Software"), to deal
' in the Software without restriction, including without limitation the rights
' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
' copies of the Software, and to permit persons to whom the Software is
' furnished to do so, subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in
' all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
' THE SOFTWARE.

Export
Inherits UserControl

Public Const _Properties As String = "*,Action,Label=True,Border=True,Pulse,Roundness"
Public Const _Group As String = "Form"
Public Const _DefaultSize As String = "6,24"
Public Const _DefaultEvent As String = "MouseDown"
Public Const _Similar As String = "ProgressBar"
Public Const _DrawWith As String = "ProgressBar"

Private $hCanvas As DrawingArea
Private $hTimer As Timer

Private $fValue As Float
Private $bLabel As Boolean = True
Private $bBorder As Boolean = True
Private $bPulse As Boolean
Private $iRoundness As Integer

Property Value As Float
Property Label As Boolean
Property Border As Boolean
Property Pulse As Boolean
Property Roundness As Integer

'Pulse specific
Private $iPulseY As Integer
Private $iPulseH As Integer
Private $bPulseUp As Boolean 'The direction the pulse block is going

Public Sub _new()

  $hCanvas = New DrawingArea(Me) As "Canvas"
  Me.Proxy = $hCanvas

End

Public Sub Canvas_Draw()

  Dim iHeight As Integer 'The height of the percentage block
  '  Dim hDim As RectF 'The dimensions of the label
  Dim iSpacing As Integer

  If Me.Border Then
    With Paint
      .AntiAlias = False
      .Background = Color.LightForeground
      .Rectangle(iSpacing, iSpacing, .W - 1, .H - 1, Me.Roundness)
      .Stroke()
      .AntiAlias = True
    End With
    iSpacing = 2
  Endif

  'Defining clip region
  Paint.Rectangle(iSpacing, iSpacing, Paint.W - iSpacing * 2, Paint.H - iSpacing * 2, Me.Roundness)
  Paint.Clip()

  If Me.Pulse And Not Me.Design Then
    Paint.FillRect(iSpacing, $iPulseY + iSpacing, $hCanvas.W - iSpacing * 2, $iPulseH - iSpacing * 2, Color.SelectedBackground)
  Else

    iHeight = $hCanvas.H * Me.Value

    With Paint
      'Drawing the block
      .FillRect(0, .H, .W, - iHeight, Color.SelectedBackground) '&H0043ACE

      'Drawing the label
      If Me.Label Then
        'Text with coloured background
        .Save()
        .Rectangle(0, .H - iHeight, .W, .H)
        .Clip()
        .Background = Color.SelectedForeground
        .DrawText(Format(Me.Value, "0%"), 0, 0, .W, .H, Align.Center)
        .Restore()

        'Text with transparent background
        .Rectangle(0, 0, .W, .H - iHeight)
        .Clip()
        .Background = Color.TextForeground
        .DrawText(Format(Me.Value, "0%"), 0, 0, .W, .H, Align.Center)
        .Restore()
      Endif
    End With
  Endif

End

Public Sub Canvas_Arrange()

  $iPulseH = $hCanvas.H / 5

End

Public Sub Timer_Timer()

  Dim iStep As Integer = $iPulseH / 4

  If $bPulseUp Then
    If $iPulseY - iStep < 0 Then
      $iPulseY = 0
      $bPulseUp = False
    Else
      $iPulseY -= iStep
    Endif
  Else
    If $iPulseY + $iPulseH + iStep > $hCanvas.H Then
      $iPulseY = $hCanvas.H - $iPulseH
      $bPulseUp = True
    Else
      $iPulseY += iStep
    Endif
  Endif

  $hCanvas.Refresh()

End

Private Function Value_Read() As Float

  Return $fValue

End

Private Sub Value_Write(Value As Float)

  If $bPulse Then Return
  $fValue = Max(0, Min(1, Value))
  $hCanvas.Refresh()

End

Private Function Label_Read() As Boolean

  Return $bLabel

End

Private Sub Label_Write(Value As Boolean)

  $bLabel = Value

End

Private Function Border_Read() As Boolean

  Return $bBorder

End

Private Sub Border_Write(Value As Boolean)

  $bBorder = Value

End

Private Function Pulse_Read() As Boolean

  Return $bPulse

End

Private Sub Pulse_Write(Value As Boolean)

  $bPulse = Value
  $hCanvas.Refresh() 'This will clear the pulse block and draw the progress block when Pulse=False

  If Me.Design Then Return

  If Me.Pulse Then
    $hTimer = New Timer As "Timer"
    $hTimer.Delay = 50
    $hTimer.Start
  Else
    $hTimer = Null
  Endif

End

Private Function Roundness_Read() As Integer

  Return $iRoundness

End

Private Sub Roundness_Write(Value As Integer)

  $iRoundness = Min(Value, 10)

End
