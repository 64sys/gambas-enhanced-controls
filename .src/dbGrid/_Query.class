' Gambas class file

Export

Property sqlString As String 'Puede ser el nombre de una tabla o una Sentencia SQL que puede tener las cláusulas where order by y limit si se recibe where pasa a ser el scope (ambito) de la consulta
Property fields As String 'nombres de campo (puede ser que lleven el alias)
Property Read from As String 'nombre de la tabla o tablas
Property Read where As String '' Where clause: $scope and ($filter) - Cláusula where a aplicar es $scope and ($filter)
Property filter As String '' Filter stablished by manipulation of dbGrid - Filtro establecido por la manipulación del dbGrid
Property scope As String ''Original filter of query included in sqlstring - Ámbito original de la consulta incluído en la cláusula where
Property order As String 'orden
Property since As Integer  'número de registro a empezar a extraer
Property howmany As Integer 'número de registros a extraer

Private $colSql As Collection
Private $since As Integer
Private $howmany As Integer
Private $scope As String
Private $filter As String

Private Function from_Read() As String

  Return $colSql[" from "]

End

Private Function where_Read() As String

  Dim cad As String
  Dim hayscope, hayfilter As Boolean

  hayscope = ($scope > " ") '1 es el scope por defecto para que $where no sea nulo y se construya al revés la sentencia
  hayfilter = ($filter > " ")
  If hayscope And Not hayfilter Then
    cad = $scope
  Else If hayscope And hayfilter Then
    cad = "(" & $scope & ") and (" & $filter & ")"
  Else If hayfilter And Not hayscope Then
    cad = $filter
  Endif

  Return cad

End

Private Function order_Read() As String

  If Not IsNull($colSql[" order by "]) Then
    Return $colSql[" order by "]
  Endif

End

Private Sub order_Write(Value As String)

  $colSql[" order by "] = Value

End

Private Function fields_Read() As String

  Return $colSql["select "]

End

Private Sub fields_Write(Value As String)

  If $colSql.Exist("select ") Then
    $colSql["select "] = Value
  Else If $colSql.Exist("select distinct ") Then
    $colSql["select distinct "] = Value
  Endif

End

Private Sub sqlString_Write(Value As String)

  Dim arSqlwords As String[]
  Dim ar As String[]

  arSqlwords = ["select ", " from ", " where ", " order by ", " limit "]
  If Left(LCase(Value), 7) <> "select " Then
    Value = "select * from `" & Value & "`"
    value = Replace(value, "``", "`")
  Else
    If Left(LCase(Value), 16) = "select distinct " Then
      arSqlwords[0] = "select distinct "
    Endif
  Endif
  $colSql = strSplit(Value, arSqlwords)
  '  If $colSql.Exist(" where ") Then
  If $colSql[" where "] > " " Then
    $scope = $colSql[" where "]
  Else
    $colSql[" where "] = "1"
    $scope = "1"
  Endif
  If $colSql[" limit "] Then
    ar = Split($colSql[" limit "], ",")
    If ar.count = 2 Then
      $since = CInt(ar[0])
      $howmany = CInt(ar[1])
    Else
      $since = CInt(ar[0])
    Endif
  Endif

End

Private Function sqlString_Read() As String

  Dim cSql, cRet, cad As String

  If Not IsNull($colSql) Then
    $colSql[" where "] = Me.where
    For Each cad In $colSql
      If cad Then
        cSql &= $colSql.Key & cad
      End If
    Next
  Endif
  cRet = cSql
  Return String.Mid(cRet, 1)

End

Private Function since_Read() As Integer

  Return $since

End

Private Sub since_Write(Value As Integer)

  $since = Value

End

Private Function howmany_Read() As Integer

  Return $howmany

End

Private Sub howmany_Write(Value As Integer)

  $howmany = Value

End

Public Sub strSplit(cadena As String, asep As String[]) As Collection

  Dim cad As String
  Dim n, i, nsince, nhowmany As Integer
  Dim cReturn As New Collection
  Dim lowSep As New String[]

  cad = LCase(cadena)
  For n = 0 To asep.Count - 1
    lowSep.Add(LCase(asep[n]))
  Next
  For n = 0 To asep.Count - 1
    nsince = InStr(cad, lowSep[n])
    If nsince > 0 Then
      nsince += Len(asep[n])
      If n < asep.count Then
        For i = n + 1 To asep.count - 1
          If InStr(cad, lowsep[i])
            nhowmany = (InStr(cad, lowsep[i])) - nsince
            Break
          Endif
        Next
        If nhowmany = 0 Then
          nhowmany = Len(cad) - nsince + 1
        Endif
      Endif
      cReturn.Add(Mid(cadena, nsince, nhowmany), asep[n])
    Else
      cReturn.Add("", asep[n])
    Endif
    nhowmany = 0
  Next
  Return cReturn

End

Private Function scope_Read() As String

  Return $scope

End

Private Sub scope_Write(Value As String)

  $scope = Value

End

Private Function filter_Read() As String

  Return $filter

End

Private Sub filter_Write(Value As String)

  $filter = Value

End
